// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WorldContent {
  Id          String       @id @unique @default(uuid())
  Name        String?
  Comment     String?
  IsObject    Boolean?
  Connections Connection[]

  /// [Attributes]
  Attributes Json?

  WorldNode   WorldNode @relation(fields: [worldNodeId], references: [id], onDelete: Cascade)
  worldNodeId Int       @unique
}

model Connection {
  Id             String       @id @unique @default(uuid())
  Destination    String
  /// [Attributes]
  Attributes     Json?
  WorldContent   WorldContent @relation(fields: [worldContentId], references: [Id], onDelete: Cascade)
  worldContentId String
}

model WorldNode {
  //prisma-extension-bark internal
  id       Int    @id @default(autoincrement())
  path     String @unique
  depth    Int
  numchild Int    @default(0)
  //

  type WorldNodeType

  WorldContent WorldContent?

  World   World  @relation(fields: [worldId], references: [Id])
  worldId String
}

model World {
  Id           String @id @unique @default(uuid())
  Title        String
  TitleGeneric String
  Description  String
  Override     Int

  WorldNodes  WorldNode[]
  Productions Production[]
  Quests      Quest[]
}

enum WorldNodeType {
  Character
  Location
  Item
  Narration
  World
}

model Production {
  Id           String  @id @unique @default(uuid())
  Title        String
  TitleGeneric String
  Description  String
  Comment      String?
  Override     Int
  LSide        Json?
  Instructions Json?
  Generic      Boolean

  World   World  @relation(fields: [worldId], references: [Id])
  worldId String

  @@unique([worldId, Title])
}

model Quest {
  id               String            @id @unique @default(uuid())
  name             String
  questNodes       QuestNode[]
  questConnections QuestConnection[]
  World            World             @relation(fields: [worldId], references: [Id])
  worldId          String
}

model QuestNode {
  id                     Int               @id @default(autoincrement())
  originalId             String
  type                   QuestNodeType
  productionName         String?
  productionArguments    String?
  questId                String
  isMainStory            Boolean
  sourceConnections      QuestConnection[] @relation("SourceNode")
  destinationConnections QuestConnection[] @relation("DestinationNode")

  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)
}

model QuestConnection {
  id            String @id @unique @default(uuid())
  sourceNodeId  Int
  destinationId Int

  sourceNode      QuestNode @relation("SourceNode", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  destinationNode QuestNode @relation("DestinationNode", fields: [destinationId], references: [id], onDelete: Cascade)

  Quest   Quest?  @relation(fields: [questId], references: [id])
  questId String?
}

enum QuestNodeType {
  success
  death
  defeat
  generic_production
  custom_production
  other_quest
  unknown
}
